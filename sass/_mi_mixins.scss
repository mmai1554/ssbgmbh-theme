@mixin hide_from_dom {
  display: none !important;
  visibility: hidden;
}

@mixin hide_from_screen {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  &.focusable {
    &:active, &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  }
}

@mixin clearfix {
  &:before {
    content: "";
    display: table;
  }
  &:after {
    content: "";
    display: table;
    clear: both;
  }
  zoom: 1;
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content
  }
  &:-moz-placeholder {
    @content
  }
  &::-moz-placeholder {
    @content
  }
  &:-ms-input-placeholder {
    @content
  }
}

$screen-lg-min: 1200px;
$screen-md-min: 1024px;
$screen-md-max: $screen-lg-min - 1;
$screen-sm-min: 768px;
$screen-sm-max: 991px;
$screen-xs-max: $screen-sm-min - 1;

@mixin bp($point) {
  @if $point == desktop {
    @media (min-width: $screen-lg-min) {
      @content;
    }
  } @else if $point == laptop {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
      @content;
    }
  } @else if $point == tablet {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
      @content;
    }
  } @else if $point == mobile {
    @media (max-width: $screen-xs-max) {
      @content;
    }
  } @else if $point == larger_mobile {
    @media (min-width: $screen-sm-min) {
      @content;
    }
  } @else if $point == larger_tablet {
    @media (min-width: $screen-md-min) {
      @content;
    }
  } @else if $point == smaller_desktop {
    @media (max-width: $screen-md-max) {
      @content;
    }
  } @else if $point == smaller_laptop {
    @media (max-width: $screen-sm-max) {
      @content;
    }
  }
}


@mixin reset_links() {
  a, a:link, a:visited, a:hover, a:active {
    text-decoration: none;
    color: $link-color;
  }
  a:hover {
    color: darken($link-color, 10%);
  }
}


@mixin mi_clearfix {
  content: "";
  display: table;
  clear: both;
}

$em-base: 16 !default;
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts "px" to "em" using the ($)em-base
@function convert-to-em($value) {
  $value: strip-unit($value) / strip-unit($em-base) * 1em;
  @if ($value == 0em) {
    $value: 0;
  }
  // Turn 0em into 0
  @return $value;
}

// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#)
// Just enter the number, no need to mention "px"
@function emCalc($values...) {
  $max: length($values); // Get the total number of parameters passed

  // If there is only 1 parameter, then return it as an integer.
  // This is done because a list can't be multiplied or divided even if it contains a single value
  @if $max == 1 {
    @return convert-to-em(nth($values, 1));
  }

  $emValues: (); // This will eventually store the converted $values in a list
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-em(nth($values, $i)));
  }
  @return $emValues;
}